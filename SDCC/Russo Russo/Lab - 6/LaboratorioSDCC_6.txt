Laboratorio-6 (2023.01.11)

Le funzioni lambda molto spesso devono essere invocate all'interno di servizi Web. Sarebbe molto comodo invocare una funzione Lambda attraverso HTTP invocata magari attraverso Javascript.

E' possibile fare questa cosa in due modi (fino a pochi mesi fa ce ne era solo 1).
Vediamo:
1) Function URL: una volta creata una funzione Lambda è possibile associargli un URL. Come si fa ad abilitare questa funzionalità? Banalmente si può fare attraverso l'interfaccia Web, altrimenti lo possiamo fare con Terraform.

Esempio:
Consideriamo una funzione giocattolo che calcola la potenza x^x. Scriviamo questa funzione in Python e la carichiamo come funzione Lambda sfruttando Terraform. (E' possibile farsi stampare lo URL alla fine del processo di creazione della funzione Lambda con Terraform specificando allo script Terraform "la macro output").

2) AWS API Gateway è lo strumento nuovo. La limitazione è che non abbiamo tanti strumenti di controllo "a grana fine".
Questo strumento in generale permette di esporre delle API (REST, HTTP, WebSocket).
Il costo è abbastanza basso: 300 Milioni di invocazioni alle API costano 1$.
Quando utilizziamo questo strumento, dobbiamo configurare diversi oggetti. Vediamoli:
- API (Possiamo addirittura utilizzare un nostro dominio);
- ...
- Integration (che cosa deve fare di fatto API Gateway quando riceve una richiesta).

Esempio:
Ora andiamo a fare lo stesso esempio di prima dove però ora andiamo ad utilizzare questa nuova soluzione. Chiaramente a livello di funzionalità avremo la stessa cosa di prima, ma avremo un cambiamento "strutturale" che ci potrà impattare il modello economico e di gestione dell'infrastruttura.
La funzione Python è esattamente quella di prima (ottimo!);
Quello che cambia è la parte relativa a Terraform.

Una parte importante è la parte dei permessi, ovvero permettere ad API Gateway di utilizzare le funzioni Lambda.

____________________________________


CORS
Da diversi anni i browser hanno una misura di sicurezza per cui se sei su un sito con un certo dominio di default non vengono consentite le richieste cross origin (ovvero richieste che vanno verso altri domini).
Questa cosa è bloccata di default se non che il server di destinazione deve essere configurato per consentire questo tipo di chiamata da un altro dominio e inoltre deve anche specificare da quale domini riceve delle richieste.
Perché ti dovrebbe servire fare una richiesta "cross origin". Beh, le funzioni Lambda abbiamo detto che espongono un URL e per usarlo in Javascript devi fare una richiesta verso questo URL che sicuro non fa parte del dominio della tua pagina Web.

Come funziona sotto la scocca?
Ogni volta che effettui una richiesta HTTP cross origin l'engine del browser genera una richiesta OPTION verso quell'origine attraverso la quale verifica se di fatto la comunicazione cross origin è possibile.

In generale è possibile abilitare CORS tramite l'interfaccia Web.

In realtà la cosa è un po' più complessa. Le richieste si dividono in 2 tipologie: "simple" e "non simple".

Una richiesta simple non necessità di nessuna verifica "cross origin".

L'errore di questo tipo lo puoi vedere comunque nel debugger del browser: vedrai un errore HTTP (CORS missing ... o qualcosa del genere).


________________

L'API Gateway offre un Response Timeout pari a 29 secondi, mentre nel caso del Function URL ai fino a 15 minuti.
L'API Gateway comunque è un qualcosa di più generico, funziona anche con altri servizi di AWS, mentre il Function URL è qualcosa di specifico alle funzioni Lambda.

______________________________________________

Serverless Image Processing

Pensiamo all'applicazione photogallery: dobbiamo processare le immagini inserite dagli utenti. Supponiamo di avere gli URL di S3 di ciascuna immagine.
Supponiamo che il processamento richiede di:
- moderazione delle immagini (no tette);
- creare un thumbnail (una preview dell'immagine);
- creare una versione scala di grigi dell'immagine.

Come facciamo a realizzare la moderazione? AWS offre servizi di Machine Learning, in particolare il servizio si chiama Amazon Rekognition.
Questo servizio permette di fare cose abbastanza "magiche", però è un servizio molto costoso.

In realtà grazie a questo servizio, e al fatto che gli altri due sono banali, alla fine realizzare quel task è un qualcosa di molto semplice.


Supponiamo ora che determinate operazioni ci venivano comode in GO e altre ci venivano comode in Python. Per come abbiamo strutturato il codice (ovvero fare queste 3 cose tutte all'interno di un'unica soluzione), non possiamo utilizzare 2 o più linguaggi.

Il servizio Step Function è l'evoluzione naturale di Lambda. E' un servizio di orchestrazione di funzioni serverless. C'è un editor grafico per definire i vari workflow.
Questo servizio si paga a parte e costa $0.025 ogni 1000 transizioni di stato (non è proprio economico come servizio).
Ci sono vari tipi di stati.
(Ad esempio lo stato choice ci permette di passare allo stato successivo in funzione di una condizione).

Come possiamo utilizzare questo servizio per risolvere il nostro problema di processamento delle immagini? Scriviamo 3 funzioni lambda, una per ogni task che ci serve, e utilizziamo Step Function per orchestrare queste funzioni.
Con questo metodo quindi alla fine paghi per l'invocazione di 3 funzione Lambda e in più paghi pure per ogni transizione dello stato dello Step Function.

(NOTA: l'output della funzione diventa l'input della successiva).

_______

EFS

Quando realizzi un'applicazione complessa sicuramente avrai bisogno per passarti dati tra una funzione lambda e l'altra. Utilizzare S3 è una pessima idea in generale, perché non garantisce basse latenze.
EFS è la soluzione a questo tipo di problemi.

__________

Continuous Delivery per Lambda

Come si può implementare ciò per Lambda? CodePipeline. E' possibile collegare il proprio GitHub alla funzione lambda e far si che la funzione lambda si aggiorni automaticamente ogni qual volta c'è un nuovo commit.

La stessa cosa può essere fatta più "rozzamente" con terraform. Per automatizzare devo utilizzare una mia pipeline in quel caso (ad esempio jenkins).

_________

AWS Cognito

Offre un servizio di autenticazione già pronto. (WOW)


______


- Route 53;
- Elastic IP (Permette di acquisire un indirizzo IP pubblico da EC2 e in qualsiasi momento lo puoi collegare e scollegare ad/da un'istanza);
- Simple Notification Service (SNS): inviare mail, sms, ... ogni qualvolta succede qualcosa;
- Lex (è un chatbot);
- Polly;

_______

AWS per stimare i costi offre "cost calculator".
