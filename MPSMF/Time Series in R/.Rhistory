sel_US_DTR_2020_2023_df$Date <- NULL
show(sel_US_DTR_2020_2023_df)
#
# Second, we change the data frame in a data table
# library("data.table")
sel_US_DTR_2020_2023_tb <- setDT(sel_US_DTR_2020_2023_df)
class(sel_US_DTR_2020_2023_tb)
show(sel_US_DTR_2020_2023_tb)
#
# Third, by the command *melt* we reshape the wide data frame to a long data frame
# library(reshape2)
rsh_sel_US_DTR_2020_2023_tb <- melt(sel_US_DTR_2020_2023_tb)
show(rsh_sel_US_DTR_2020_2023_tb[1:20,])
show(rsh_sel_US_DTR_2020_2023_tb[(nrow(rsh_sel_US_DTR_2020_2023_tb)-20):nrow(rsh_sel_US_DTR_2020_2023_tb),])
#
# In the end, we add an Index identifying variable and a Data column to the data frame rsh_sel_US_DTR_2020_2023_tb
rsh_sel_US_DTR_2020_2023_tb <- add_column(rsh_sel_US_DTR_2020_2023_tb,
Index=rep(1:nrow(sel_US_DTR_2020_2023_df), times=ncol(sel_US_DTR_2020_2023_df)),
Date=rep(US_DTR_2020_2023_df$Date[sel_rows], times=ncol(sel_US_DTR_2020_2023_df)),
.before="variable")
show(rsh_sel_US_DTR_2020_2023_tb[1:20,])
show(rsh_sel_US_DTR_2020_2023_tb[(ncol(sel_US_DTR_2020_2023_df)*nrow(sel_US_DTR_2020_2023_df)-20):
(ncol(sel_US_DTR_2020_2023_df)*nrow(sel_US_DTR_2020_2023_df)),])
#
# Finally, We are in a position to draw a draft plot of the Daily Treasury Yield Curve Rates
# library(ggplot2)
Data_df <- rsh_sel_US_DTR_2020_2023_tb
length <- ncol(sel_US_DTR_2020_2023_df)
First_Day <- as.character(Data_df$Date[1])
Last_Day <- as.character(last(Data_df$Date))
title_content <- bquote(atop("University of Roma \"Tor Vergata\" - \u0040 MPSMF 2022-2023",
paste("Scatter Plots of U.S. Treasury Yield Curve Rates (business days from ", .(First_Day), " to ", .(Last_Day),")")))
link <- "https://home.treasury.gov/policy-issues/financing-the-government/interest-rate-statistics"
subtitle_content <- bquote(paste("path length ", .(length), " sample points. Data by courtesy of  U.S. Department of the Treasure  -  ", .(link)))
caption_content <- "Author: Roberto Monte"
x_name <- bquote("expiration dates")
leg_labs <- as.character(US_DTR_2020_2023_df$Date[sel_rows])
# leg_vals <- levels(factor(Data_df$Index))
leg_vals <- rainbow(length(levels(factor(Data_df$Index))))[as.numeric(levels(factor(Data_df$Index)))]
US_DTR_03_27_04_07_2023_Curve_Rate_lp <- ggplot(Data_df, aes(x=variable, y=value, group=factor(Index))) +
geom_line(aes(color=factor(Index)), linewidth=0.8, linetype="solid") +
ggtitle(title_content) +
labs(subtitle=subtitle_content, caption=caption_content) +
xlab("time to maturity") + ylab("yield rates") +
scale_colour_manual(name="Legend", labels=leg_labs, values=leg_vals) +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0),
axis.text.x = element_text(angle=0, vjust=1),
legend.key.width = unit(0.80,"cm"), legend.position="right")
plot(US_DTR_03_27_04_07_2023_Curve_Rate_lp)
init_date  <- which(US_DTR_2020_2023_df$Date=="2021-01-04")
final_date <- which(US_DTR_2020_2023_df$Date=="2021-01-15")
sel_rows <- seq.int(from=init_date, to=final_date, by=1)
sel_US_DTR_2020_2023_df <- US_DTR_2020_2023_df[sel_rows,]
show(sel_US_DTR_2020_2023_df)
rownames(sel_US_DTR_2020_2023_df) <- seq(from=1, to=nrow(sel_US_DTR_2020_2023_df))
sel_US_DTR_2020_2023_df$Date <- NULL
show(sel_US_DTR_2020_2023_df)
#
# Second, we change the data frame in a table
# library("data.table")
sel_US_DTR_2020_2023_tb <- setDT(sel_US_DTR_2020_2023_df)
class(sel_US_DTR_2020_2023_tb)
show(sel_US_DTR_2020_2023_tb)
#
# Third, by the command *melt* we reshape the wide data frame to a long data frame
# library(reshape2)
rsh_sel_US_DTR_2020_2023_tb <- melt(sel_US_DTR_2020_2023_tb)
show(rsh_sel_US_DTR_2020_2023_tb[1:20,])
show(rsh_sel_US_DTR_2020_2023_tb[(nrow(rsh_sel_US_DTR_2020_2023_tb)-20):nrow(rsh_sel_US_DTR_2020_2023_tb),])
#
# In the end, we add an Index identifying variable and a Data column to the data frame rsh_sel_US_DTR_2020_2023_tb
# library(tibble)
rsh_sel_US_DTR_2020_2023_tb <- add_column(rsh_sel_US_DTR_2020_2023_tb,
Index=rep(1:nrow(sel_US_DTR_2020_2023_df), times=ncol(sel_US_DTR_2020_2023_df)),
Date=rep(US_DTR_2020_2023_df$Date[sel_rows], times=ncol(sel_US_DTR_2020_2023_df)),
.before="variable")
show(rsh_sel_US_DTR_2020_2023_tb[1:20,])
show(rsh_sel_US_DTR_2020_2023_tb[(ncol(sel_US_DTR_2020_2023_df)*nrow(sel_US_DTR_2020_2023_df)-20):
(ncol(sel_US_DTR_2020_2023_df)*nrow(sel_US_DTR_2020_2023_df)),])
#
# Finally, We are in a position to draw a draft plot of the Daily Treasury Yield Curve Rates
# library(ggplot2)
Data_df <- rsh_sel_US_DTR_2020_2023_tb
length <- ncol(sel_US_DTR_2020_2023_df)
First_Day <- as.character(Data_df$Date[1])
Last_Day <- as.character(last(Data_df$Date))
title_content <- bquote(atop("University of Roma \"Tor Vergata\" - \u0040 MPSMF 2022-2023",
paste("Scatter Plots of U.S. Treasury Yield Curve Rates (business days from ", .(First_Day), " to ", .(Last_Day),")")))
link <- "https://home.treasury.gov/policy-issues/financing-the-government/interest-rate-statistics"
subtitle_content <- bquote(paste("path length ", .(length), " sample points. Data by courtesy of  U.S. Department of the Treasure  -  ", .(link)))
caption_content <- "Author: Roberto Monte"
x_name <- bquote("expiration dates")
leg_labs <- as.character(US_DTR_2020_2023_df$Date[sel_rows])
# leg_vals <- levels(factor(Data_df$Index))
leg_vals <- rainbow(length(levels(factor(Data_df$Index))))[as.numeric(levels(factor(Data_df$Index)))]
US_DTR_01_04_01_15_2021_Curve_Rate_lp <- ggplot(Data_df, aes(x=variable, y=value, group=factor(Index))) +
geom_line(aes(color=factor(Index)), linewidth=0.8, linetype="solid") +
ggtitle(title_content) +
labs(subtitle=subtitle_content, caption=caption_content) +
xlab("time to maturity") + ylab("yield rates") +
scale_colour_manual(name="Legend", labels=leg_labs, values=leg_vals) +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0),
axis.text.x = element_text(angle=0, vjust=1),
legend.key.width = unit(0.80,"cm"), legend.position="right")
plot(US_DTR_01_04_01_15_2021_Curve_Rate_lp)
#
# Interpolating the NA value we the plot can be drawn as follows
show(rsh_sel_US_DTR_2020_2023_tb[20:52,])
as.vector(which(is.na(Data_df$value)))
NA_length <- length(as.vector(which(is.na(Data_df$value))))
#
(as.vector(which(is.na(Data_df$value)))-NA_length)[1]
(as.vector(which(is.na(Data_df$value)))+NA_length)[1]
#
(as.vector(which(is.na(Data_df$value)))-NA_length)[2]
(as.vector(which(is.na(Data_df$value)))+NA_length)[2]
#
# ...
#
Data_df$variable[(as.vector(which(is.na(Data_df$value)))- NA_length)[1]]
Data_df$value[(as.vector(which(is.na(Data_df$value)))-NA_length)[1]]
Data_df$variable[as.vector(which(is.na(Data_df$value))+NA_length)[1]]
Data_df$value[as.vector(which(is.na(Data_df$value))+NA_length)[1]]
# ...
Data_df$variable[(as.vector(which(is.na(Data_df$value)))- NA_length)[6]]
Data_df$value[(as.vector(which(is.na(Data_df$value)))-NA_length)[6]]
Data_df$variable[as.vector(which(is.na(Data_df$value))+NA_length)[6]]
Data_df$value[as.vector(which(is.na(Data_df$value))+NA_length)[6]]
# ...
#
Data_df <- rsh_sel_US_DTR_2020_2023_tb
length <- ncol(sel_US_DTR_2020_2023_df)
NA_length <- length(as.vector(which(is.na(Data_df$value))))
First_Day <- as.character(Data_df$Date[1])
Last_Day <- as.character(last(Data_df$Date))
title_content <- bquote(atop("University of Roma \"Tor Vergata\" - \u0040 MPSMF 2022-2023",
paste("Scatter Plots of U.S. Treasury Yield Curve Rates (business days from ", .(First_Day), " to ", .(Last_Day),")")))
link <- "https://home.treasury.gov/policy-issues/financing-the-government/interest-rate-statistics"
subtitle_content <- bquote(paste("path length ", .(length), " sample points. Data by courtesy of  U.S. Department of the Treasure  -  ", .(link)))
caption_content <- "Author: Roberto Monte"
x_name <- bquote("expiration dates")
leg_labs <- as.character(US_DTR_2020_2023_df$Date[sel_rows])
# leg_vals <- levels(factor(Data_df$Index))
leg_vals <- rainbow(length(levels(factor(Data_df$Index))))[as.numeric(levels(factor(Data_df$Index)))]
US_DTR_01_04_01_15_2021_Interp_Curve_Rate_lp <- ggplot(Data_df, aes(x=variable, y=value, group=factor(Index))) +
geom_line(aes(color=factor(Index)), linewidth=0.8, linetype="solid") +
geom_segment(aes(x=variable[(as.vector(which(is.na(value)))-NA_length)[1]],
y=value[(as.vector(which(is.na(value)))-NA_length)[1]],
xend=variable[(as.vector(which(is.na(value)))+NA_length)[1]],
yend=value[(as.vector(which(is.na(value)))+NA_length)[1]],
color=factor(Index)[1]), linetype="dashed", alpha=1, linewidth=1, group=1) +
geom_segment(aes(x=variable[(as.vector(which(is.na(value)))-NA_length)[2]],
y=value[(as.vector(which(is.na(value)))-NA_length)[2]],
xend=variable[(as.vector(which(is.na(value)))+NA_length)[2]],
yend=value[(as.vector(which(is.na(value)))+NA_length)[2]],
color=factor(Index)[2]), linetype="dashed", alpha=1, linewidth=1, group=1) +
geom_segment(aes(x=variable[(as.vector(which(is.na(value)))-NA_length)[3]],
y=value[(as.vector(which(is.na(value)))-NA_length)[3]],
xend=variable[(as.vector(which(is.na(value)))+NA_length)[3]],
yend=value[(as.vector(which(is.na(value)))+NA_length)[3]],
color=factor(Index)[3]), linetype="dashed", alpha=1, linewidth=1, group=1) +
geom_segment(aes(x=variable[(as.vector(which(is.na(value)))-NA_length)[4]],
y=value[(as.vector(which(is.na(value)))-NA_length)[4]],
xend=variable[(as.vector(which(is.na(value)))+NA_length)[4]],
yend=value[(as.vector(which(is.na(value)))+NA_length)[4]],
color=factor(Index)[4]), linetype="dashed", alpha=1, linewidth=1, group=1) +
geom_segment(aes(x=variable[(as.vector(which(is.na(value)))-NA_length)[5]],
y=value[(as.vector(which(is.na(value)))-NA_length)[5]],
xend=variable[(as.vector(which(is.na(value)))+NA_length)[5]],
yend=value[(as.vector(which(is.na(value)))+NA_length)[5]],
color=factor(Index)[5]), linetype="dashed", alpha=1, linewidth=1, group=1) +
geom_segment(aes(x=variable[(as.vector(which(is.na(value)))-NA_length)[6]],
y=value[(as.vector(which(is.na(value)))-NA_length)[6]],
xend=variable[(as.vector(which(is.na(value)))+NA_length)[6]],
yend=value[(as.vector(which(is.na(value)))+NA_length)[6]],
color=factor(Index)[6]), linetype="dashed", alpha=1, linewidth=1, group=1) +
geom_segment(aes(x=variable[(as.vector(which(is.na(value)))-NA_length)[7]],
y=value[(as.vector(which(is.na(value)))-NA_length)[7]],
xend=variable[(as.vector(which(is.na(value)))+NA_length)[7]],
yend=value[(as.vector(which(is.na(value)))+NA_length)[7]],
color=factor(Index)[7]), linetype="dashed", alpha=1, linewidth=1, group=1) +
geom_segment(aes(x=variable[(as.vector(which(is.na(value)))-NA_length)[8]],
y=value[(as.vector(which(is.na(value)))-NA_length)[8]],
xend=variable[(as.vector(which(is.na(value)))+NA_length)[8]],
yend=value[(as.vector(which(is.na(value)))+NA_length)[8]],
color=factor(Index)[8]), linetype="dashed", alpha=1, linewidth=1, group=1) +
geom_segment(aes(x=variable[(as.vector(which(is.na(value)))-NA_length)[9]],
y=value[(as.vector(which(is.na(value)))-NA_length)[9]],
xend=variable[(as.vector(which(is.na(value)))+NA_length)[9]],
yend=value[(as.vector(which(is.na(value)))+NA_length)[9]],
color=factor(Index)[9]), linetype="dashed", alpha=1, linewidth=1, group=1) +
geom_segment(aes(x=variable[(as.vector(which(is.na(value)))-NA_length)[10]],
y=value[(as.vector(which(is.na(value)))-NA_length)[10]],
xend=variable[(as.vector(which(is.na(value)))+NA_length)[10]],
yend=value[(as.vector(which(is.na(value)))+NA_length)[10]],
color=factor(Index)[10]), linetype="dashed", alpha=1, linewidth=1, group=1) +
ggtitle(title_content) +
labs(subtitle=subtitle_content, caption=caption_content) +
xlab("time to maturity") + ylab("yield rates") +
scale_colour_manual(name="Legend", labels=leg_labs, values=leg_vals) +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0),
axis.text.x = element_text(angle=0, vjust=1),
legend.key.width = unit(0.80,"cm"), legend.position="right")
plot(US_DTR_01_04_01_15_2021_Interp_Curve_Rate_lp)
# Now, we try to compute the Treasury Yield Rates from the prices of Market Based Bills
# https://www.treasurydirect.gov/GA-FI/FedInvest/selectSecurityPriceDate
# We build a data frame with data from the "securityprice-2023-01-03.csv" file.
US_SP_2023_01_03_df <- read.csv("securityprice-2023-01-03.csv", header=FALSE)
show(US_SP_2023_01_03_df[1:15,])
# We rename the columns according to the terminology in https://www.treasurydirect.gov/GA-FI/FedInvest/selectSecurityPriceDate.
US_SP_2023_01_03_df <- rename(US_SP_2023_01_03_df, CUSIP=V1, Security.Type=V2, Rate=V3, Maturity.Date=V4,
Call.Date=V5, Buy=V6, Sell=V7, End.of.Day=V8)
head(US_SP_2023_01_03_df)
# We check whether the Maturity.Date column is in "Date" format. In case it is not, we change the format to "Date".
class(US_SP_2023_01_03_df$Maturity.Date)
US_SP_2023_01_03_df$Maturity.Date <- as.Date(US_SP_2023_01_03_df$Maturity.Date,  format="%m/%d/%Y")
show(US_SP_2023_01_03_df[1:15,])
# We add a column *Days.to.Maturity*, which accounts for the number of days from January 1st, 2023, to the Maturity Date
US_SP_2023_01_03_df <- add_column(US_SP_2023_01_03_df,
Days.to.Maturity=as.vector(difftime(US_SP_2023_01_03_df$Maturity.Date, as.Date(as.character("2023-01-03")), units="days")),
.after="Maturity.Date")
show(US_SP_2023_01_03_df[1:15,])
# We also add the column *Months.to.Maturity* [resp. *Years.to.Maturity*], which accounts for the number of months
# [resp. years] from January 1st, 2023, to the Maturity Date.
US_SP_2023_01_03_df <- add_column(US_SP_2023_01_03_df,
Months.to.Maturity=as.vector(US_SP_2023_01_03_df$Days.to.Maturity/30.4369),
Years.to.Maturity=as.vector(US_SP_2023_01_03_df$Days.to.Maturity/365.2425),
.after="Days.to.Maturity")
show(US_SP_2023_01_03_df[1:15,])
# We add a column *Rate.of.Return.at.Maturity* and *Perc.Rate.of.Return.at.Maturity*
US_SP_2023_01_03_df <- add_column(US_SP_2023_01_03_df,
Rate.of.Ret.at.Maturity=(100-US_SP_2023_01_03_df$End.of.Day)/US_SP_2023_01_03_df$End.of.Day,
Perc.Rate.of.Ret.at.Maturity=label_percent(accuracy = 0.001)((100-US_SP_2023_01_03_df$End.of.Day)/US_SP_2023_01_03_df$End.of.Day),
.after="End.of.Day")
show(US_SP_2023_01_03_df[1:15,])
#
# We compute the annual rate of return according to the formulas
# (1+r_a)^t=1+r_t; r_a=(1+r_t)^(1/t)-1
# where r_a=annual rate of return, t=time to maturity (in years), r_t=rate of return in the period t.
# or
# (1+r_a)^(t/365.2425)=1+r_t; r_a=(1+r_t)^(365.2425/t)-1
# where r_a=annual rate of return, t=time to maturity (in days), r_t=rate of return in the period t.
#
Annual.Rate.of.Ret_01 <- (1+US_SP_2023_01_03_df$Rate.of.Ret.at.Maturity)^(1/US_SP_2023_01_03_df$Years.to.Maturity)-1
show(Annual.Rate.of.Ret_01)
Annual.Rate.of.Ret_02 <- (1+US_SP_2023_01_03_df$Rate.of.Ret.at.Maturity)^(365.2425/US_SP_2023_01_03_df$Days.to.Maturity)-1
show(Annual.Rate.of.Ret_02)
Annual.Rate.of.Ret_01==Annual.Rate.of.Ret_02
# We add a column *Ann.Rate.of.Return* and *Perc.Ann.Rate.of.Return*
US_SP_2023_01_03_df <- add_column(US_SP_2023_01_03_df,
Ann.Rate.of.Ret=(1+US_SP_2023_01_03_df$Rate.of.Ret.at.Maturity)^(1/US_SP_2023_01_03_df$Years.to.Maturity)-1,
Perc.Ann.Rate.of.Ret=label_percent(accuracy = 0.001)((1+US_SP_2023_01_03_df$Rate.of.Ret.at.Maturity)^(1/US_SP_2023_01_03_df$Years.to.Maturity)-1),
.after="Perc.Rate.of.Ret.at.Maturity")
show(US_SP_2023_01_03_df[1:15,])
#####################################################################################################################
# Still, we compute the Treasury Yield Rates from the prices of Market Based Bills
# https://www.treasurydirect.gov/GA-FI/FedInvest/selectSecurityPriceDate
# We build a data frame with data from the "securityprice-2023-04-11.csv" file.
US_SP_2023_04_11_df <- read.csv("securityprice-2023-04-11.csv", header=FALSE)
show(US_SP_2023_04_11_df[1:15,])
# We rename the columns according to the terminology in https://www.treasurydirect.gov/GA-FI/FedInvest/selectSecurityPriceDate.
US_SP_2023_04_11_df <- rename(US_SP_2023_04_11_df, CUSIP=V1, Security.Type=V2, Rate=V3, Maturity.Date=V4,
Call.Date=V5, Buy=V6, Sell=V7, End.of.Day=V8)
head(US_SP_2023_04_11_df)
# We check whether the Maturity.Date column is in "Date" format. In case it is not, we change the format to "Date".
class(US_SP_2023_04_11_df$Maturity.Date)
US_SP_2023_04_11_df$Maturity.Date <- as.Date(US_SP_2023_04_11_df$Maturity.Date,  format="%m/%d/%Y")
show(US_SP_2023_04_11_df[1:15,])
# We add a column *Days.to.Maturity*, which accounts for the number of days from January 1st, 2023, to the Maturity Date
US_SP_2023_04_11_df <- add_column(US_SP_2023_04_11_df,
Days.to.Maturity=as.vector(difftime(US_SP_2023_04_11_df$Maturity.Date, as.Date(as.character("2023-04-11")), units="days")),
.after="Maturity.Date")
show(US_SP_2023_04_11_df[1:15,])
# We also add the column *Months.to.Maturity* [resp. *Years.to.Maturity*], which accounts for the number of months
# [resp. years] from January 1st, 2023, to the Maturity Date.
US_SP_2023_04_11_df <- add_column(US_SP_2023_04_11_df,
Months.to.Maturity=as.vector(US_SP_2023_04_11_df$Days.to.Maturity/30.4369),
Years.to.Maturity=as.vector(US_SP_2023_04_11_df$Days.to.Maturity/365.2425),
.after="Days.to.Maturity")
show(US_SP_2023_04_11_df[1:15,])
# We add a column *Rate.of.Return.at.Maturity* and *Perc.Rate.of.Return.at.Maturity*
US_SP_2023_04_11_df <- add_column(US_SP_2023_04_11_df,
Rate.of.Ret.at.Maturity=(100-US_SP_2023_04_11_df$End.of.Day)/US_SP_2023_04_11_df$End.of.Day,
Perc.Rate.of.Ret.at.Maturity=label_percent(accuracy = 0.001)((100-US_SP_2023_04_11_df$End.of.Day)/US_SP_2023_04_11_df$End.of.Day),
.after="End.of.Day")
show(US_SP_2023_04_11_df[1:15,])
#
SPX_Opt_2023_06_16 <- getOptionChain("^SPX", Exp="2023-06-16", src='yahoo')
class(SPX_Opt_2023_06_16)
length(SPX_Opt_2023_06_16)
show(SPX_Opt_2023_06_16[[1]])
class(SPX_Opt_2023_06_16[[1]])
nrow(SPX_Opt_2023_06_16[[1]])
show(SPX_Opt_2023_06_16[[2]])
class(SPX_Opt_2023_06_16[[2]])
nrow(SPX_Opt_2023_06_16[[2]])
show(SPX_Opt_2023_06_16[[1]]$Strike)
show(SPX_Opt_2023_06_16[[2]]$Strike)
Strike <- sort(union(SPX_Opt_2023_06_16[[1]]$Strike, SPX_Opt_2023_06_16[[2]]$Strike))
show(Strike)
length(Strike)
Call_Indx <- sapply(Strike, function(x) which(SPX_Opt_2023_06_16[[1]]$Strike==x)[1])
Put_Indx <- sapply(Strike, function(x) which(SPX_Opt_2023_06_16[[2]]$Strike==x)[1])
#
SPX_Opt_2023_06_16_df <- data.frame(Indx=1:length(Strike),
Call_ContractID=SPX_Opt_2023_06_16[[1]]$ContractID[Call_Indx],
Call_Bid=SPX_Opt_2023_06_16[[1]]$Bid[Call_Indx],
Call_Ask=SPX_Opt_2023_06_16[[1]]$Ask[Call_Indx],
Call_Vol=SPX_Opt_2023_06_16[[1]]$Vol[Call_Indx],
Call_OI=SPX_Opt_2023_06_16[[1]]$OI[Call_Indx],
Call_PrChg=SPX_Opt_2023_06_16[[1]]$Chg[Call_Indx],
Call_PrChgPct=SPX_Opt_2023_06_16[[1]]$ChgPct[Call_Indx],
Call_LastTrTime=SPX_Opt_2023_06_16[[1]]$LastTradeTime[Call_Indx],
Call_LastPr=SPX_Opt_2023_06_16[[1]]$Last[Call_Indx],
Call_ImplVol=SPX_Opt_2023_06_16[[1]]$IV[Call_Indx],
Call_ITM=SPX_Opt_2023_06_16[[1]]$ITM[Call_Indx],
Strike=Strike,
Put_ITM=SPX_Opt_2023_06_16[[2]]$ITM[Put_Indx],
Put_ImplVol=SPX_Opt_2023_06_16[[2]]$IV[Put_Indx],
Put_LastPr=SPX_Opt_2023_06_16[[2]]$Last[Put_Indx],
Put_LastTrTime=SPX_Opt_2023_06_16[[2]]$LastTradeTime[Put_Indx],
Put_PrChgPct=SPX_Opt_2023_06_16[[2]]$ChgPct[Put_Indx],
Put_PrChg=SPX_Opt_2023_06_16[[2]]$Chg[Put_Indx],
Put_OI=SPX_Opt_2023_06_16[[2]]$OI[Put_Indx],
Put_Vol=SPX_Opt_2023_06_16[[2]]$Vol[Put_Indx],
Put_Ask=SPX_Opt_2023_06_16[[2]]$Ask[Put_Indx],
Put_Bid=SPX_Opt_2023_06_16[[2]]$Bid[Put_Indx],
Put_ContractID=SPX_Opt_2023_06_16[[2]]$ContractID[Put_Indx])
head(SPX_Opt_2023_06_16_df,10)
tail(SPX_Opt_2023_06_16_df,10)
write.csv(SPX_Opt_2023_06_16_df,"/Users/festinho/Desktop/University/University/MPSMF/Time Series in R")
Annual.Rate.of.Ret_01 <- (1+US_SP_2023_04_11_df$Rate.of.Ret.at.Maturity)^(1/US_SP_2023_04_11_df$Years.to.Maturity)-1
show(Annual.Rate.of.Ret_01)
Annual.Rate.of.Ret_02 <- (1+US_SP_2023_04_11_df$Rate.of.Ret.at.Maturity)^(365.2425/US_SP_2023_04_11_df$Days.to.Maturity)-1
show(Annual.Rate.of.Ret_02)
Annual.Rate.of.Ret_01==Annual.Rate.of.Ret_02
# We add a column *Ann.Rate.of.Return* and *Perc.Ann.Rate.of.Return*
US_SP_2023_04_11_df <- add_column(US_SP_2023_04_11_df,
Ann.Rate.of.Ret=(1+US_SP_2023_04_11_df$Rate.of.Ret.at.Maturity)^(1/US_SP_2023_04_11_df$Years.to.Maturity)-1,
Perc.Ann.Rate.of.Ret=label_percent(accuracy = 0.001)((1+US_SP_2023_04_11_df$Rate.of.Ret.at.Maturity)^(1/US_SP_2023_04_11_df$Years.to.Maturity)-1),
.after="Perc.Rate.of.Ret.at.Maturity")
show(US_SP_2023_04_11_df[1:30,])
SPX_Opt_2023_06_16 <- getOptionChain("^SPX", Exp="2023-06-16", src='yahoo')
class(SPX_Opt_2023_06_16)
length(SPX_Opt_2023_06_16)
show(SPX_Opt_2023_06_16[[1]])
class(SPX_Opt_2023_06_16[[1]])
nrow(SPX_Opt_2023_06_16[[1]])
show(SPX_Opt_2023_06_16[[2]])
class(SPX_Opt_2023_06_16[[2]])
nrow(SPX_Opt_2023_06_16[[2]])
show(SPX_Opt_2023_06_16[[1]]$Strike)
show(SPX_Opt_2023_06_16[[2]]$Strike)
Strike <- sort(union(SPX_Opt_2023_06_16[[1]]$Strike, SPX_Opt_2023_06_16[[2]]$Strike))
show(Strike)
length(Strike)
Call_Indx <- sapply(Strike, function(x) which(SPX_Opt_2023_06_16[[1]]$Strike==x)[1])
Put_Indx <- sapply(Strike, function(x) which(SPX_Opt_2023_06_16[[2]]$Strike==x)[1])
#
SPX_Opt_2023_06_16_df <- data.frame(Indx=1:length(Strike),
Call_ContractID=SPX_Opt_2023_06_16[[1]]$ContractID[Call_Indx],
Call_Bid=SPX_Opt_2023_06_16[[1]]$Bid[Call_Indx],
Call_Ask=SPX_Opt_2023_06_16[[1]]$Ask[Call_Indx],
Call_Vol=SPX_Opt_2023_06_16[[1]]$Vol[Call_Indx],
Call_OI=SPX_Opt_2023_06_16[[1]]$OI[Call_Indx],
Call_PrChg=SPX_Opt_2023_06_16[[1]]$Chg[Call_Indx],
Call_PrChgPct=SPX_Opt_2023_06_16[[1]]$ChgPct[Call_Indx],
Call_LastTrTime=SPX_Opt_2023_06_16[[1]]$LastTradeTime[Call_Indx],
Call_LastPr=SPX_Opt_2023_06_16[[1]]$Last[Call_Indx],
Call_ImplVol=SPX_Opt_2023_06_16[[1]]$IV[Call_Indx],
Call_ITM=SPX_Opt_2023_06_16[[1]]$ITM[Call_Indx],
Strike=Strike,
Put_ITM=SPX_Opt_2023_06_16[[2]]$ITM[Put_Indx],
Put_ImplVol=SPX_Opt_2023_06_16[[2]]$IV[Put_Indx],
Put_LastPr=SPX_Opt_2023_06_16[[2]]$Last[Put_Indx],
Put_LastTrTime=SPX_Opt_2023_06_16[[2]]$LastTradeTime[Put_Indx],
Put_PrChgPct=SPX_Opt_2023_06_16[[2]]$ChgPct[Put_Indx],
Put_PrChg=SPX_Opt_2023_06_16[[2]]$Chg[Put_Indx],
Put_OI=SPX_Opt_2023_06_16[[2]]$OI[Put_Indx],
Put_Vol=SPX_Opt_2023_06_16[[2]]$Vol[Put_Indx],
Put_Ask=SPX_Opt_2023_06_16[[2]]$Ask[Put_Indx],
Put_Bid=SPX_Opt_2023_06_16[[2]]$Bid[Put_Indx],
Put_ContractID=SPX_Opt_2023_06_16[[2]]$ContractID[Put_Indx])
head(SPX_Opt_2023_06_16_df,10)
tail(SPX_Opt_2023_06_16_df,10)
write.csv(SPX_Opt_2023_06_16_df,"/Users/festinho/Desktop/University/University/MPSMF/Time Series in R")
# Still, we compute the Treasury Yield Rates from the prices of Market Based Bills
# https://www.treasurydirect.gov/GA-FI/FedInvest/selectSecurityPriceDate
# We build a data frame with data from the "securityprice-2023-04-11.csv" file.
US_SP_2023_04_11_df <- read.csv("securityprice-2023-04-11.csv", header=FALSE)
show(US_SP_2023_04_11_df[1:15,])
# We rename the columns according to the terminology in https://www.treasurydirect.gov/GA-FI/FedInvest/selectSecurityPriceDate.
US_SP_2023_04_11_df <- rename(US_SP_2023_04_11_df, CUSIP=V1, Security.Type=V2, Rate=V3, Maturity.Date=V4,
Call.Date=V5, Buy=V6, Sell=V7, End.of.Day=V8)
head(US_SP_2023_04_11_df)
# We check whether the Maturity.Date column is in "Date" format. In case it is not, we change the format to "Date".
class(US_SP_2023_04_11_df$Maturity.Date)
US_SP_2023_04_11_df$Maturity.Date <- as.Date(US_SP_2023_04_11_df$Maturity.Date,  format="%m/%d/%Y")
show(US_SP_2023_04_11_df[1:15,])
# We add a column *Days.to.Maturity*, which accounts for the number of days from January 1st, 2023, to the Maturity Date
US_SP_2023_04_11_df <- add_column(US_SP_2023_04_11_df,
Days.to.Maturity=as.vector(difftime(US_SP_2023_04_11_df$Maturity.Date, as.Date(as.character("2023-04-11")), units="days")),
.after="Maturity.Date")
show(US_SP_2023_04_11_df[1:15,])
# We also add the column *Months.to.Maturity* [resp. *Years.to.Maturity*], which accounts for the number of months
# [resp. years] from January 1st, 2023, to the Maturity Date.
US_SP_2023_04_11_df <- add_column(US_SP_2023_04_11_df,
Months.to.Maturity=as.vector(US_SP_2023_04_11_df$Days.to.Maturity/30.4369),
Years.to.Maturity=as.vector(US_SP_2023_04_11_df$Days.to.Maturity/365.2425),
.after="Days.to.Maturity")
show(US_SP_2023_04_11_df[1:15,])
# We add a column *Rate.of.Return.at.Maturity* and *Perc.Rate.of.Return.at.Maturity*
US_SP_2023_04_11_df <- add_column(US_SP_2023_04_11_df,
Rate.of.Ret.at.Maturity=(100-US_SP_2023_04_11_df$End.of.Day)/US_SP_2023_04_11_df$End.of.Day,
Perc.Rate.of.Ret.at.Maturity=label_percent(accuracy = 0.001)((100-US_SP_2023_04_11_df$End.of.Day)/US_SP_2023_04_11_df$End.of.Day),
.after="End.of.Day")
show(US_SP_2023_04_11_df[1:15,])
#
# We compute the annual rate of return according to the formulas
# (1+r_a)^t=1+r_t; r_a=(1+r_t)^(1/t)-1
# where r_a=annual rate of return, t=time to maturity (in years), r_t=rate of return in the period t.
# or
# (1+r_a)^(t/365.2425)=1+r_t; r_a=(1+r_t)^(365.2425/t)-1
# where r_a=annual rate of return, t=time to maturity (in days), r_t=rate of return in the period t.
#
Annual.Rate.of.Ret_01 <- (1+US_SP_2023_04_11_df$Rate.of.Ret.at.Maturity)^(1/US_SP_2023_04_11_df$Years.to.Maturity)-1
show(Annual.Rate.of.Ret_01)
Annual.Rate.of.Ret_02 <- (1+US_SP_2023_04_11_df$Rate.of.Ret.at.Maturity)^(365.2425/US_SP_2023_04_11_df$Days.to.Maturity)-1
show(Annual.Rate.of.Ret_02)
Annual.Rate.of.Ret_01==Annual.Rate.of.Ret_02
# We add a column *Ann.Rate.of.Return* and *Perc.Ann.Rate.of.Return*
US_SP_2023_04_11_df <- add_column(US_SP_2023_04_11_df,
Ann.Rate.of.Ret=(1+US_SP_2023_04_11_df$Rate.of.Ret.at.Maturity)^(1/US_SP_2023_04_11_df$Years.to.Maturity)-1,
Perc.Ann.Rate.of.Ret=label_percent(accuracy = 0.001)((1+US_SP_2023_04_11_df$Rate.of.Ret.at.Maturity)^(1/US_SP_2023_04_11_df$Years.to.Maturity)-1),
.after="Perc.Rate.of.Ret.at.Maturity")
show(US_SP_2023_04_11_df[1:30,])
#####################################################################################################################
# European Options on Standard & Poor 500 (Yahoo Finance - ^SPX)
# library(quantmod)
SPX_Opt_2023_06_16 <- getOptionChain("^SPX", Exp="2023-06-16", src='yahoo')
class(SPX_Opt_2023_06_16)
length(SPX_Opt_2023_06_16)
show(SPX_Opt_2023_06_16[[1]])
class(SPX_Opt_2023_06_16[[1]])
nrow(SPX_Opt_2023_06_16[[1]])
show(SPX_Opt_2023_06_16[[2]])
class(SPX_Opt_2023_06_16[[2]])
nrow(SPX_Opt_2023_06_16[[2]])
show(SPX_Opt_2023_06_16[[1]]$Strike)
show(SPX_Opt_2023_06_16[[2]]$Strike)
Strike <- sort(union(SPX_Opt_2023_06_16[[1]]$Strike, SPX_Opt_2023_06_16[[2]]$Strike))
show(Strike)
length(Strike)
Call_Indx <- sapply(Strike, function(x) which(SPX_Opt_2023_06_16[[1]]$Strike==x)[1])
Put_Indx <- sapply(Strike, function(x) which(SPX_Opt_2023_06_16[[2]]$Strike==x)[1])
#
SPX_Opt_2023_06_16_df <- data.frame(Indx=1:length(Strike),
Call_ContractID=SPX_Opt_2023_06_16[[1]]$ContractID[Call_Indx],
Call_Bid=SPX_Opt_2023_06_16[[1]]$Bid[Call_Indx],
Call_Ask=SPX_Opt_2023_06_16[[1]]$Ask[Call_Indx],
Call_Vol=SPX_Opt_2023_06_16[[1]]$Vol[Call_Indx],
Call_OI=SPX_Opt_2023_06_16[[1]]$OI[Call_Indx],
Call_PrChg=SPX_Opt_2023_06_16[[1]]$Chg[Call_Indx],
Call_PrChgPct=SPX_Opt_2023_06_16[[1]]$ChgPct[Call_Indx],
Call_LastTrTime=SPX_Opt_2023_06_16[[1]]$LastTradeTime[Call_Indx],
Call_LastPr=SPX_Opt_2023_06_16[[1]]$Last[Call_Indx],
Call_ImplVol=SPX_Opt_2023_06_16[[1]]$IV[Call_Indx],
Call_ITM=SPX_Opt_2023_06_16[[1]]$ITM[Call_Indx],
Strike=Strike,
Put_ITM=SPX_Opt_2023_06_16[[2]]$ITM[Put_Indx],
Put_ImplVol=SPX_Opt_2023_06_16[[2]]$IV[Put_Indx],
Put_LastPr=SPX_Opt_2023_06_16[[2]]$Last[Put_Indx],
Put_LastTrTime=SPX_Opt_2023_06_16[[2]]$LastTradeTime[Put_Indx],
Put_PrChgPct=SPX_Opt_2023_06_16[[2]]$ChgPct[Put_Indx],
Put_PrChg=SPX_Opt_2023_06_16[[2]]$Chg[Put_Indx],
Put_OI=SPX_Opt_2023_06_16[[2]]$OI[Put_Indx],
Put_Vol=SPX_Opt_2023_06_16[[2]]$Vol[Put_Indx],
Put_Ask=SPX_Opt_2023_06_16[[2]]$Ask[Put_Indx],
Put_Bid=SPX_Opt_2023_06_16[[2]]$Bid[Put_Indx],
Put_ContractID=SPX_Opt_2023_06_16[[2]]$ContractID[Put_Indx])
head(SPX_Opt_2023_06_16_df,10)
tail(SPX_Opt_2023_06_16_df,10)
write.csv(SPX_Opt_2023_06_16_df,"/Users/festinho/Desktop/University/University/MPSMF/Time Series in R/SPX_Option_Chain_2023_06_16.csv")
dir("/Users/festinho/Desktop/University/University/MPSMF/Time Series in R")
write.csv(SPX_Opt_2023_06_16_df,"/Users/festinho/Desktop/University/University/MPSMF/Time Series in R/SPX_Option_Chain_2023_06_16.csv")
dir("/Users/festinho/Desktop/University/University/MPSMF/Time Series in R")
#
Call_LastTrDate_df <- data.frame(Call_LastTrDate=as.Date(SPX_Opt_2023_06_16_df$Call_LastTrTime))
class(Call_LastTrDate_df)
head(Call_LastTrDate_df,20)
nrow(Call_LastTrDate_df)
Call_LastTrDate_tb <- table(Call_LastTrDate_df)
class(Call_LastTrDate_tb)
show(Call_LastTrDate_tb)
#
Put_LastTrDate_df <- data.frame(Put_LastTrDate=as.Date(SPX_Opt_2023_06_16_df$Put_LastTrTime))
class(Put_LastTrDate_df)
head(Put_LastTrDate_df,20)
nrow(Put_LastTrDate_df)
Put_LastTrDate_tb <- table(Put_LastTrDate_df)
class(Put_LastTrDate_tb)
show(Put_LastTrDate_tb)
#
Call_LastTrDate_2023_04_11_Indx <- SPX_Opt_2023_06_16_df$Indx[which(Call_LastTrDate_df$Call_LastTrDate=="2023-04-11")]
show(Call_LastTrDate_2023_04_11_Indx)
length(Call_LastTrDate_2023_04_11_Indx)
Put_LastTrDate_2023_04_11_Indx <- SPX_Opt_2023_06_16_df$Indx[which(Put_LastTrDate_df$Put_LastTrDate=="2023-04-11")]
show(Put_LastTrDate_2023_04_11_Indx)
length(Put_LastTrDate_2023_04_11_Indx)
Call_Put_2023_04_11_Indx <- intersect(Call_LastTrDate_2023_04_11_Indx, Put_LastTrDate_2023_04_11_Indx)
show(Call_Put_2023_04_11_Indx)
length(Call_Put_2023_04_11_Indx)
